# Generated by Django 4.2.23 on 2025-09-10 15:32

from django.db import migrations


def migrate_publication_data(apps, schema_editor):
    """
    Migrate publication data from ObjectInstance to ObjectVersion.

    For each ObjectInstance with status="published":
    1. Find or create latest ObjectVersion
    2. Set effective_date = publish_date (or created_at if None)
    3. Set expiry_date = unpublish_date
    4. Update current_version pointer
    """
    ObjectInstance = apps.get_model("object_storage", "ObjectInstance")
    ObjectVersion = apps.get_model("object_storage", "ObjectVersion")

    updated_count = 0
    created_count = 0

    for obj in ObjectInstance.objects.filter(status="published"):
        # Get or create latest version
        latest_version = obj.versions.order_by("-version_number").first()

        if not latest_version:
            # Create a version if none exists
            latest_version = ObjectVersion.objects.create(
                object_instance=obj,
                version_number=1,
                data=obj.data if hasattr(obj, "data") else {},
                widgets=obj.widgets if hasattr(obj, "widgets") else {},
                created_by=obj.created_by,
                change_description="Migrated from published object instance",
            )
            created_count += 1

        # Set publication dates
        latest_version.effective_date = obj.publish_date or obj.created_at
        latest_version.expiry_date = obj.unpublish_date
        latest_version.save()

        # Update current_version pointer
        obj.current_version = latest_version
        obj.save()

        updated_count += 1

    print(
        f"Migration completed: {updated_count} objects updated, {created_count} versions created"
    )


def reverse_migration_data(apps, schema_editor):
    """
    Reverse migration - move publication data back to ObjectInstance.
    """
    ObjectInstance = apps.get_model("object_storage", "ObjectInstance")

    for obj in ObjectInstance.objects.all():
        if obj.current_version and obj.current_version.effective_date:
            obj.status = "published"
            obj.publish_date = obj.current_version.effective_date
            obj.unpublish_date = obj.current_version.expiry_date
            obj.save()


class Migration(migrations.Migration):

    dependencies = [
        ("object_storage", "0011_add_publication_fields_to_objectversion"),
    ]

    operations = [
        migrations.RunPython(migrate_publication_data, reverse_migration_data),
    ]
