# Generated by Django 4.2.25 on 2025-10-30 12:23

from django.db import migrations, models


def populate_cached_paths(apps, schema_editor):
    """Populate cached_path for all existing pages"""
    WebPage = apps.get_model('webpages', 'WebPage')
    
    def update_tree(page):
        """Recursively update page and its children"""
        # Calculate path
        if page.parent:
            parent_path = page.parent.cached_path
            slug_part = (page.slug or "").strip("/")
            page.cached_path = f"{parent_path.rstrip('/')}/{slug_part}/"
        else:
            # Root page
            if page.hostnames:
                page.cached_path = "/"
            else:
                slug_part = (page.slug or "").strip("/")
                page.cached_path = f"/{slug_part}/"
        
        page.save(update_fields=['cached_path'])
        
        # Update children
        for child in page.children.all():
            update_tree(child)
    
    # Start with root pages
    root_pages = WebPage.objects.filter(parent__isnull=True)
    for root in root_pages:
        update_tree(root)


class Migration(migrations.Migration):

    dependencies = [
        ('webpages', '0046_duplicatepagelog'),
    ]

    operations = [
        migrations.AddField(
            model_name='webpage',
            name='cached_path',
            field=models.CharField(blank=True, db_index=True, default='', help_text='Cached absolute URL path (auto-maintained via signals)', max_length=2048),
        ),
        migrations.RunPython(populate_cached_paths, migrations.RunPython.noop),
        migrations.AddIndex(
            model_name='webpage',
            index=models.Index(fields=['cached_path'], name='webpages_cached_path_idx'),
        ),
    ]
