# Generated by Django 4.2.23 on 2025-08-01 12:41

from django.db import migrations
import json


def migrate_publishing_data_forward(apps, schema_editor):
    """
    Copy publishing dates from WebPage to PageVersion.

    For each published page:
    1. Find its current published version
    2. Copy effective_date and expiry_date from page to version
    3. If no published version exists, create one
    """
    WebPage = apps.get_model("webpages", "WebPage")
    PageVersion = apps.get_model("webpages", "PageVersion")
    User = apps.get_model("auth", "User")

    migrated_count = 0
    created_versions_count = 0

    for page in WebPage.objects.filter(publication_status="published"):
        # Find current published version
        current_version = page.versions.filter(
            status="published", is_current=True
        ).first()

        if current_version:
            # Copy dates from page to current version
            current_version.effective_date = page.effective_date
            current_version.expiry_date = page.expiry_date
            current_version.save(update_fields=["effective_date", "expiry_date"])
            migrated_count += 1
        else:
            # Page is marked as published but has no published version
            # Create a new version with the page's current state

            # Find a user to associate with the version (use last_modified_by or created_by)
            user = page.last_modified_by or page.created_by

            # Get next version number
            latest_version = page.versions.order_by("-version_number").first()
            version_number = (
                (latest_version.version_number + 1) if latest_version else 1
            )

            # Serialize current page state
            page_data = {
                "title": page.title,
                "slug": page.slug,
                "description": page.description,
                "hostnames": page.hostnames,
                "layout": page.code_layout,
                "theme_id": page.theme.id if page.theme else None,
                "publication_status": page.publication_status,
                "effective_date": page.effective_date.isoformat()
                if page.effective_date
                else None,
                "expiry_date": page.expiry_date.isoformat()
                if page.expiry_date
                else None,
                "meta_title": page.meta_title,
                "meta_description": page.meta_description,
                "meta_keywords": page.meta_keywords,
                "linked_object_type": page.linked_object_type,
                "linked_object_id": page.linked_object_id,
                "parent_id": page.parent_id,
                "sort_order": page.sort_order,
            }

            # Create new published version
            PageVersion.objects.create(
                page=page,
                version_number=version_number,
                page_data=page_data,
                widgets={},  # Empty widgets for now
                status="published",
                is_current=True,
                effective_date=page.effective_date,
                expiry_date=page.expiry_date,
                published_at=page.effective_date or page.updated_at,
                published_by=user,
                description=f"Migrated from WebPage publishing system on {page.updated_at.strftime('%Y-%m-%d')}",
                created_by=user,
            )
            created_versions_count += 1

    print(
        f"Migration completed: {migrated_count} versions updated, {created_versions_count} versions created"
    )


def migrate_publishing_data_reverse(apps, schema_editor):
    """
    Reverse the migration by clearing the new date fields.
    """
    PageVersion = apps.get_model("webpages", "PageVersion")

    # Clear the new date fields
    PageVersion.objects.update(effective_date=None, expiry_date=None)

    print(
        "Reverse migration completed: cleared effective_date and expiry_date from all versions"
    )


class Migration(migrations.Migration):
    dependencies = [
        ("webpages", "0015_add_date_based_publishing"),
    ]

    operations = [
        migrations.RunPython(
            migrate_publishing_data_forward,
            migrate_publishing_data_reverse,
            elidable=True,
        ),
    ]
