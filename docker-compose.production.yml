version: '3.8'

services:
  # PostgreSQL Database - Production config
  db:
    image: postgres:15-alpine
    # Remove platform for x86_64 production servers
    # platform: linux/arm64
    container_name: eceee_v4_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-eceee_v4}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      # Use Docker volume for postgres data
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    # Don't expose ports externally in production
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend - Production config
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eceee_v4_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      imgproxy:
        condition: service_started
    environment:
      # Production settings
      - DEBUG=0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-eceee_v4}
      - POSTGRES_DB=${POSTGRES_DB:-eceee_v4}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - ALLOWED_HOSTS=${DOMAIN:-localhost},www.${DOMAIN:-localhost},localhost,backend,127.0.0.1
      - CORS_ALLOWED_ORIGINS=https://${DOMAIN:-localhost}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      
      # Proxy settings for Caddy reverse proxy
      - SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https
      - USE_X_FORWARDED_HOST=True
      
      # Use Linode Object Storage in production
      - AWS_ACCESS_KEY_ID=${LINODE_OBJECT_STORAGE_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${LINODE_OBJECT_STORAGE_SECRET_KEY}
      - AWS_STORAGE_BUCKET_NAME=${LINODE_OBJECT_STORAGE_BUCKET:-eceee-v4-media}
      - AWS_S3_ENDPOINT_URL=https://${LINODE_OBJECT_STORAGE_REGION:-eu-central-1}.linodeobjects.com
      - AWS_S3_REGION_NAME=${LINODE_OBJECT_STORAGE_REGION:-eu-central-1}
      - AWS_S3_USE_SSL=True
      - AWS_S3_CUSTOM_DOMAIN=${LINODE_OBJECT_STORAGE_BUCKET:-eceee-v4-media}.${LINODE_OBJECT_STORAGE_REGION:-eu-central-1}.linodeobjects.com
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # imgproxy with security enabled
      - IMGPROXY_URL=http://imgproxy:8080
      - IMGPROXY_KEY=${IMGPROXY_KEY}
      - IMGPROXY_SALT=${IMGPROXY_SALT}
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    expose:
      - "8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend - Production config
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eceee_v4_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=https://${DOMAIN:-localhost}/api
      - REACT_APP_BACKEND_URL=https://${DOMAIN:-localhost}
      - VITE_IMGPROXY_URL=http://imgproxy:8080
      - VITE_IMGPROXY_KEY=${IMGPROXY_KEY}
      - VITE_IMGPROXY_SALT=${IMGPROXY_SALT}
      - VITE_IMGPROXY_SIGNATURE_SIZE=32
    expose:
      - "80"

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: eceee_v4_redis
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # imgproxy for image processing - Production config
  imgproxy:
    image: darthsim/imgproxy:latest
    container_name: eceee_v4_imgproxy
    restart: unless-stopped
    environment:
      # Security settings - ENABLED in production
      IMGPROXY_KEY: ${IMGPROXY_KEY}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
      IMGPROXY_SIGNATURE_SIZE: 32
      IMGPROXY_ALLOW_UNSAFE_URL: false  # Disabled in production
      
      # Performance settings
      IMGPROXY_MAX_SRC_RESOLUTION: 50.0
      IMGPROXY_MAX_SRC_FILE_SIZE: 52428800
      IMGPROXY_WORKERS: 4
      IMGPROXY_MAX_CLIENTS: 2048
      IMGPROXY_TTL: 31536000
      
      # Quality and format settings
      IMGPROXY_QUALITY: 85
      IMGPROXY_FORMAT_QUALITY: "jpeg=85,webp=85,avif=85"
      IMGPROXY_AUTO_ROTATE: true
      IMGPROXY_STRIP_METADATA: true
      IMGPROXY_STRIP_COLOR_PROFILE: false
      
      # Enable modern formats
      IMGPROXY_AUTO_WEBP: true
      IMGPROXY_AUTO_AVIF: true
      IMGPROXY_ENFORCE_WEBP: false
      IMGPROXY_ENFORCE_AVIF: false
      
      # Use Linode Object Storage
      IMGPROXY_USE_S3: true
      IMGPROXY_S3_ENDPOINT: https://${LINODE_OBJECT_STORAGE_REGION:-eu-central-1}.linodeobjects.com
      IMGPROXY_S3_REGION: ${LINODE_OBJECT_STORAGE_REGION:-eu-central-1}
      IMGPROXY_AWS_ACCESS_KEY_ID: ${LINODE_OBJECT_STORAGE_ACCESS_KEY}
      IMGPROXY_AWS_SECRET_ACCESS_KEY: ${LINODE_OBJECT_STORAGE_SECRET_KEY}
      
      # Security headers
      IMGPROXY_SET_CANONICAL_HEADER: true
      IMGPROXY_ALLOWED_SOURCES: s3://${LINODE_OBJECT_STORAGE_BUCKET:-eceee-v4-media}/
      
      # Logging
      IMGPROXY_LOG_LEVEL: warn
      IMGPROXY_ENABLE_DEBUG_HEADERS: false
      IMGPROXY_DEVELOPMENT_ERRORS_MODE: false
      
      # Presets for common sizes
      IMGPROXY_PRESETS: "thumbnail=resize:fill:150:150/gravity:sm,small=resize:fit:300:300,medium=resize:fit:600:600,large=resize:fit:1200:1200,hero=resize:fill:1920:1080/gravity:sm,avatar=resize:fill:128:128/gravity:sm/format:webp"
    expose:
      - "8080"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Caddy reverse proxy - handles HTTPS automatically
  caddy:
    image: caddy:2-alpine
    container_name: eceee_v4_caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:2019/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  backend_static:
  backend_media:
  redis_data:
  caddy_data:
  caddy_config:

networks:
  default:
    driver: bridge

