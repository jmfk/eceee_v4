services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    platform: linux/arm64
    container_name: eceee_v4_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: eceee_v4
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eceee_v4_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/eceee_v4
      - POSTGRES_DB=eceee_v4
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,frontend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - SECRET_KEY=dev-secret-key-change-in-production
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_STORAGE_BUCKET_NAME=eceee-media
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_REGION_NAME=us-east-1
      - AWS_S3_USE_SSL=False
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: eceee_v4_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_BACKEND_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    command: npm run dev -- --host 0.0.0.0
    stdin_open: true
    tty: true

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: eceee_v4_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    platform: linux/arm64
    container_name: eceee_v4_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"    # API
      - "9001:9001"    # Console
    volumes:
      - ./storage/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  backend_static:
  backend_media:
  frontend_node_modules:
  redis_data:
  mcp_logs:

networks:
  default:
    driver: bridge
  mcp_network:
    driver: bridge