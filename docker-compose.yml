version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: eceee_v4_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: eceee_v4
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eceee_v4_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/eceee_v4
      - POSTGRES_DB=eceee_v4
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,frontend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eceee_v4_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_BACKEND_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    command: npm start
    stdin_open: true
    tty: true

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: eceee_v4_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # MCP Server for PostgreSQL operations
  # mcp-postgres:
  #   image: mcp/postgres
  #   container_name: eceee_v4_mcp_postgres
  #   restart: unless-stopped
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - mcp_logs:/var/log/mcp
  #   environment:
  #     - MCP_SERVER_NAME=postgres
  #     - DATABASE_URL=postgresql://postgres:postgres@db:5432/eceee_v4
  #   networks:
  #     - mcp_network

  # MCP Server for Puppeteer operations
  mcp-puppeteer:
    build:
      context: ./docker/mcp-servers
      dockerfile: Dockerfile.puppeteer
    container_name: eceee_v4_mcp_puppeteer
    restart: unless-stopped
    volumes:
      - mcp_logs:/var/log/mcp
    environment:
      - MCP_SERVER_NAME=puppeteer
    networks:
      - mcp_network

  # MCP Server for Django operations
  # mcp-django:
  #   build:
  #     context: ./docker/mcp-servers
  #     dockerfile: Dockerfile.django
  #   container_name: eceee_v4_mcp_django
  #   restart: unless-stopped
  #   depends_on:
  #     - backend
  #   volumes:
  #     - ./:/workspace:ro
  #     - mcp_logs:/var/log/mcp
  #   environment:
  #     - MCP_SERVER_NAME=django
  #     - DJANGO_PROJECT_PATH=/workspace/backend
  #   networks:
  #     - mcp_network


  # MCP Server for Logs operations
  # mcp-logs:
  #   build:
  #     context: ./docker/mcp-servers
  #     dockerfile: Dockerfile.logs
  #   container_name: eceee_v4_mcp_logs
  #   restart: unless-stopped
  #   volumes:
  #     - ./:/workspace:ro
  #     - mcp_logs:/var/log/mcp
  #     - /var/log:/host/var/log:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - MCP_SERVER_NAME=logs
  #   networks:
  #     - mcp_network


volumes:
  postgres_data:
  backend_static:
  backend_media:
  frontend_node_modules:
  redis_data:
  mcp_logs:

networks:
  default:
    driver: bridge
  mcp_network:
    driver: bridge